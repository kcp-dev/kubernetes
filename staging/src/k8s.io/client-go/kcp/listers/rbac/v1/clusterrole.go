//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1

import (
	apimachinerycache "github.com/kcp-dev/apimachinery/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v2"
	rbacv1 "k8s.io/api/rbac/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	rbacv1listers "k8s.io/client-go/listers/rbac/v1"
	"k8s.io/client-go/tools/cache"
)

var _ rbacv1listers.ClusterRoleLister = &ClusterRoleClusterLister{}

// ClusterRoleClusterLister implements the rbacv1listers.ClusterRoleLister interface.
type ClusterRoleClusterLister struct {
	indexer cache.Indexer
}

// NewClusterRoleClusterLister returns a new ClusterRoleClusterLister.
func NewClusterRoleClusterLister(indexer cache.Indexer) rbacv1listers.ClusterRoleLister {
	return &ClusterRoleClusterLister{indexer: indexer}
}

// List lists all rbacv1.ClusterRole in the indexer.
func (s ClusterRoleClusterLister) List(selector labels.Selector) (ret []*rbacv1.ClusterRole, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*rbacv1.ClusterRole))
	})
	return ret, err
}

// Get retrieves the rbacv1.ClusterRole from the indexer for a given name.
func (s ClusterRoleClusterLister) Get(name string) (*rbacv1.ClusterRole, error) {
	panic("Calling 'Get' is not supported before scoping lister to a workspace")
}

// Cluster returns an object that can list and get rbacv1.ClusterRole.

func (s ClusterRoleClusterLister) Cluster(cluster logicalcluster.Name) rbacv1listers.ClusterRoleLister {
	return &ClusterRoleLister{indexer: s.indexer, cluster: cluster}
}

// ClusterRoleLister implements the rbacv1listers.ClusterRoleLister interface.
type ClusterRoleLister struct {
	indexer cache.Indexer
	cluster logicalcluster.Name
}

// List lists all rbacv1.ClusterRole in the indexer.
func (s ClusterRoleLister) List(selector labels.Selector) (ret []*rbacv1.ClusterRole, err error) {
	selectAll := selector == nil || selector.Empty()

	key := apimachinerycache.ToClusterAwareKey(s.cluster.String(), "", "")
	list, err := s.indexer.ByIndex(apimachinerycache.ClusterIndexName, key)
	if err != nil {
		return nil, err
	}

	for i := range list {
		obj := list[i].(*rbacv1.ClusterRole)
		if selectAll {
			ret = append(ret, obj)
		} else {
			if selector.Matches(labels.Set(obj.GetLabels())) {
				ret = append(ret, obj)
			}
		}
	}

	return ret, err
}

// Get retrieves the rbacv1.ClusterRole from the indexer for a given name.
func (s ClusterRoleLister) Get(name string) (*rbacv1.ClusterRole, error) {
	key := apimachinerycache.ToClusterAwareKey(s.cluster.String(), "", name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(rbacv1.Resource("ClusterRole"), name)
	}
	return obj.(*rbacv1.ClusterRole), nil
}
