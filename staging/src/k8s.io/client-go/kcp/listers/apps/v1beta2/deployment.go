//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1beta2

import (
	apimachinerycache "github.com/kcp-dev/apimachinery/pkg/cache"
	"github.com/kcp-dev/logicalcluster"
	appsv1beta2 "k8s.io/api/apps/v1beta2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	appsv1beta2listers "k8s.io/client-go/listers/apps/v1beta2"
	"k8s.io/client-go/tools/cache"
)

var _ appsv1beta2listers.DeploymentLister = &DeploymentClusterLister{}

// DeploymentClusterLister implements the appsv1beta2listers.DeploymentLister interface.
type DeploymentClusterLister struct {
	indexer cache.Indexer
}

// NewDeploymentClusterLister returns a new DeploymentClusterLister.
func NewDeploymentClusterLister(indexer cache.Indexer) appsv1beta2listers.DeploymentLister {
	return &DeploymentClusterLister{indexer: indexer}
}

// List lists all appsv1beta2.Deployment in the indexer.
func (s DeploymentClusterLister) List(selector labels.Selector) (ret []*appsv1beta2.Deployment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*appsv1beta2.Deployment))
	})
	return ret, err
}

// Deployments returns an object that can list and get appsv1beta2.Deployment.
func (s DeploymentClusterLister) Deployments(namespace string) appsv1beta2listers.DeploymentNamespaceLister {
	panic("Calling 'Deployments' is not supported before scoping lister to a workspace")
}

// Cluster returns an object that can list and get appsv1beta2.Deployment.

func (s DeploymentClusterLister) Cluster(cluster logicalcluster.Name) appsv1beta2listers.DeploymentLister {
	return &DeploymentLister{indexer: s.indexer, cluster: cluster}
}

// DeploymentLister implements the appsv1beta2listers.DeploymentLister interface.
type DeploymentLister struct {
	indexer cache.Indexer
	cluster logicalcluster.Name
}

// List lists all appsv1beta2.Deployment in the indexer.
func (s DeploymentLister) List(selector labels.Selector) (ret []*appsv1beta2.Deployment, err error) {
	selectAll := selector == nil || selector.Empty()

	key := apimachinerycache.ToClusterAwareKey(s.cluster.String(), "", "")
	list, err := s.indexer.ByIndex(apimachinerycache.ClusterIndexName, key)
	if err != nil {
		return nil, err
	}

	for i := range list {
		obj := list[i].(*appsv1beta2.Deployment)
		if selectAll {
			ret = append(ret, obj)
		} else {
			if selector.Matches(labels.Set(obj.GetLabels())) {
				ret = append(ret, obj)
			}
		}
	}

	return ret, err
}

// Deployments returns an object that can list and get appsv1beta2.Deployment.
func (s DeploymentLister) Deployments(namespace string) appsv1beta2listers.DeploymentNamespaceLister {
	return &DeploymentNamespaceLister{indexer: s.indexer, cluster: s.cluster, namespace: namespace}
}

// DeploymentNamespaceLister implements the appsv1beta2listers.DeploymentNamespaceLister interface.
type DeploymentNamespaceLister struct {
	indexer   cache.Indexer
	cluster   logicalcluster.Name
	namespace string
}

// List lists all appsv1beta2.Deployment in the indexer for a given namespace.
func (s DeploymentNamespaceLister) List(selector labels.Selector) (ret []*appsv1beta2.Deployment, err error) {
	selectAll := selector == nil || selector.Empty()

	key := apimachinerycache.ToClusterAwareKey(s.cluster.String(), s.namespace, "")
	list, err := s.indexer.ByIndex(apimachinerycache.ClusterAndNamespaceIndexName, key)
	if err != nil {
		return nil, err
	}

	for i := range list {
		obj := list[i].(*appsv1beta2.Deployment)
		if selectAll {
			ret = append(ret, obj)
		} else {
			if selector.Matches(labels.Set(obj.GetLabels())) {
				ret = append(ret, obj)
			}
		}
	}
	return ret, err
}

// Get retrieves the appsv1beta2.Deployment from the indexer for a given namespace and name.
func (s DeploymentNamespaceLister) Get(name string) (*appsv1beta2.Deployment, error) {
	key := apimachinerycache.ToClusterAwareKey(s.cluster.String(), s.namespace, name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(appsv1beta2.Resource("Deployment"), name)
	}
	return obj.(*appsv1beta2.Deployment), nil
}
