//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1beta1

import (
	apimachinerycache "github.com/kcp-dev/apimachinery/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v2"
	policyv1beta1 "k8s.io/api/policy/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	policyv1beta1listers "k8s.io/client-go/listers/policy/v1beta1"
	"k8s.io/client-go/tools/cache"
)

var _ policyv1beta1listers.PodDisruptionBudgetLister = &PodDisruptionBudgetClusterLister{}

// PodDisruptionBudgetClusterLister implements the policyv1beta1listers.PodDisruptionBudgetLister interface.
type PodDisruptionBudgetClusterLister struct {
	indexer cache.Indexer
}

// NewPodDisruptionBudgetClusterLister returns a new PodDisruptionBudgetClusterLister.
func NewPodDisruptionBudgetClusterLister(indexer cache.Indexer) policyv1beta1listers.PodDisruptionBudgetLister {
	return &PodDisruptionBudgetClusterLister{indexer: indexer}
}

// List lists all policyv1beta1.PodDisruptionBudget in the indexer.
func (s PodDisruptionBudgetClusterLister) List(selector labels.Selector) (ret []*policyv1beta1.PodDisruptionBudget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*policyv1beta1.PodDisruptionBudget))
	})
	return ret, err
}

// PodDisruptionBudgets returns an object that can list and get policyv1beta1.PodDisruptionBudget.
func (s PodDisruptionBudgetClusterLister) PodDisruptionBudgets(namespace string) policyv1beta1listers.PodDisruptionBudgetNamespaceLister {
	panic("Calling 'PodDisruptionBudgets' is not supported before scoping lister to a workspace")
}

// Cluster returns an object that can list and get policyv1beta1.PodDisruptionBudget.

func (s PodDisruptionBudgetClusterLister) Cluster(cluster logicalcluster.Name) policyv1beta1listers.PodDisruptionBudgetLister {
	return &PodDisruptionBudgetLister{indexer: s.indexer, cluster: cluster}
}

// PodDisruptionBudgetLister implements the policyv1beta1listers.PodDisruptionBudgetLister interface.
type PodDisruptionBudgetLister struct {
	indexer cache.Indexer
	cluster logicalcluster.Name
}

// List lists all policyv1beta1.PodDisruptionBudget in the indexer.
func (s PodDisruptionBudgetLister) List(selector labels.Selector) (ret []*policyv1beta1.PodDisruptionBudget, err error) {
	selectAll := selector == nil || selector.Empty()

	key := apimachinerycache.ToClusterAwareKey(s.cluster.String(), "", "")
	list, err := s.indexer.ByIndex(apimachinerycache.ClusterIndexName, key)
	if err != nil {
		return nil, err
	}

	for i := range list {
		obj := list[i].(*policyv1beta1.PodDisruptionBudget)
		if selectAll {
			ret = append(ret, obj)
		} else {
			if selector.Matches(labels.Set(obj.GetLabels())) {
				ret = append(ret, obj)
			}
		}
	}

	return ret, err
}

// PodDisruptionBudgets returns an object that can list and get policyv1beta1.PodDisruptionBudget.
func (s PodDisruptionBudgetLister) PodDisruptionBudgets(namespace string) policyv1beta1listers.PodDisruptionBudgetNamespaceLister {
	return &PodDisruptionBudgetNamespaceLister{indexer: s.indexer, cluster: s.cluster, namespace: namespace}
}

// PodDisruptionBudgetNamespaceLister implements the policyv1beta1listers.PodDisruptionBudgetNamespaceLister interface.
type PodDisruptionBudgetNamespaceLister struct {
	indexer   cache.Indexer
	cluster   logicalcluster.Name
	namespace string
}

// List lists all policyv1beta1.PodDisruptionBudget in the indexer for a given namespace.
func (s PodDisruptionBudgetNamespaceLister) List(selector labels.Selector) (ret []*policyv1beta1.PodDisruptionBudget, err error) {
	selectAll := selector == nil || selector.Empty()

	key := apimachinerycache.ToClusterAwareKey(s.cluster.String(), s.namespace, "")
	list, err := s.indexer.ByIndex(apimachinerycache.ClusterAndNamespaceIndexName, key)
	if err != nil {
		return nil, err
	}

	for i := range list {
		obj := list[i].(*policyv1beta1.PodDisruptionBudget)
		if selectAll {
			ret = append(ret, obj)
		} else {
			if selector.Matches(labels.Set(obj.GetLabels())) {
				ret = append(ret, obj)
			}
		}
	}
	return ret, err
}

// Get retrieves the policyv1beta1.PodDisruptionBudget from the indexer for a given namespace and name.
func (s PodDisruptionBudgetNamespaceLister) Get(name string) (*policyv1beta1.PodDisruptionBudget, error) {
	key := apimachinerycache.ToClusterAwareKey(s.cluster.String(), s.namespace, name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(policyv1beta1.Resource("PodDisruptionBudget"), name)
	}
	return obj.(*policyv1beta1.PodDisruptionBudget), nil
}
