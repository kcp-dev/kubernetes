//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1

import (
	apimachinerycache "github.com/kcp-dev/apimachinery/pkg/cache"
	"github.com/kcp-dev/logicalcluster"
	networkingv1 "k8s.io/api/networking/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	networkingv1listers "k8s.io/client-go/listers/networking/v1"
	"k8s.io/client-go/tools/cache"
)

var _ networkingv1listers.IngressLister = &IngressClusterLister{}

// IngressClusterLister implements the networkingv1listers.IngressLister interface.
type IngressClusterLister struct {
	indexer cache.Indexer
}

// NewIngressClusterLister returns a new IngressClusterLister.
func NewIngressClusterLister(indexer cache.Indexer) networkingv1listers.IngressLister {
	return &IngressClusterLister{indexer: indexer}
}

// List lists all networkingv1.Ingress in the indexer.
func (s IngressClusterLister) List(selector labels.Selector) (ret []*networkingv1.Ingress, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*networkingv1.Ingress))
	})
	return ret, err
}

// Ingresses returns an object that can list and get networkingv1.Ingress.
func (s IngressClusterLister) Ingresses(namespace string) networkingv1listers.IngressNamespaceLister {
	panic("Calling 'Ingresses' is not supported before scoping lister to a workspace")
}

// Cluster returns an object that can list and get networkingv1.Ingress.

func (s IngressClusterLister) Cluster(cluster logicalcluster.Name) networkingv1listers.IngressLister {
	return &IngressLister{indexer: s.indexer, cluster: cluster}
}

// IngressLister implements the networkingv1listers.IngressLister interface.
type IngressLister struct {
	indexer cache.Indexer
	cluster logicalcluster.Name
}

// List lists all networkingv1.Ingress in the indexer.
func (s IngressLister) List(selector labels.Selector) (ret []*networkingv1.Ingress, err error) {
	selectAll := selector == nil || selector.Empty()

	key := apimachinerycache.ToClusterAwareKey(s.cluster.String(), "", "")
	list, err := s.indexer.ByIndex(apimachinerycache.ClusterIndexName, key)
	if err != nil {
		return nil, err
	}

	for i := range list {
		obj := list[i].(*networkingv1.Ingress)
		if selectAll {
			ret = append(ret, obj)
		} else {
			if selector.Matches(labels.Set(obj.GetLabels())) {
				ret = append(ret, obj)
			}
		}
	}

	return ret, err
}

// Ingresses returns an object that can list and get networkingv1.Ingress.
func (s IngressLister) Ingresses(namespace string) networkingv1listers.IngressNamespaceLister {
	return &IngressNamespaceLister{indexer: s.indexer, cluster: s.cluster, namespace: namespace}
}

// IngressNamespaceLister implements the networkingv1listers.IngressNamespaceLister interface.
type IngressNamespaceLister struct {
	indexer   cache.Indexer
	cluster   logicalcluster.Name
	namespace string
}

// List lists all networkingv1.Ingress in the indexer for a given namespace.
func (s IngressNamespaceLister) List(selector labels.Selector) (ret []*networkingv1.Ingress, err error) {
	selectAll := selector == nil || selector.Empty()

	key := apimachinerycache.ToClusterAwareKey(s.cluster.String(), s.namespace, "")
	list, err := s.indexer.ByIndex(apimachinerycache.ClusterAndNamespaceIndexName, key)
	if err != nil {
		return nil, err
	}

	for i := range list {
		obj := list[i].(*networkingv1.Ingress)
		if selectAll {
			ret = append(ret, obj)
		} else {
			if selector.Matches(labels.Set(obj.GetLabels())) {
				ret = append(ret, obj)
			}
		}
	}
	return ret, err
}

// Get retrieves the networkingv1.Ingress from the indexer for a given namespace and name.
func (s IngressNamespaceLister) Get(name string) (*networkingv1.Ingress, error) {
	key := apimachinerycache.ToClusterAwareKey(s.cluster.String(), s.namespace, name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(networkingv1.Resource("Ingress"), name)
	}
	return obj.(*networkingv1.Ingress), nil
}
