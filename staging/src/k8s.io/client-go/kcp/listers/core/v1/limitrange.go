//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1

import (
	apimachinerycache "github.com/kcp-dev/apimachinery/pkg/cache"
	"github.com/kcp-dev/logicalcluster"
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	corev1listers "k8s.io/client-go/listers/core/v1"
	"k8s.io/client-go/tools/cache"
)

var _ corev1listers.LimitRangeLister = &LimitRangeClusterLister{}

// LimitRangeClusterLister implements the corev1listers.LimitRangeLister interface.
type LimitRangeClusterLister struct {
	indexer cache.Indexer
}

// NewLimitRangeClusterLister returns a new LimitRangeClusterLister.
func NewLimitRangeClusterLister(indexer cache.Indexer) corev1listers.LimitRangeLister {
	return &LimitRangeClusterLister{indexer: indexer}
}

// List lists all corev1.LimitRange in the indexer.
func (s LimitRangeClusterLister) List(selector labels.Selector) (ret []*corev1.LimitRange, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*corev1.LimitRange))
	})
	return ret, err
}

// LimitRanges returns an object that can list and get corev1.LimitRange.
func (s LimitRangeClusterLister) LimitRanges(namespace string) corev1listers.LimitRangeNamespaceLister {
	panic("Calling 'LimitRanges' is not supported before scoping lister to a workspace")
}

// Cluster returns an object that can list and get corev1.LimitRange.

func (s LimitRangeClusterLister) Cluster(cluster logicalcluster.Name) corev1listers.LimitRangeLister {
	return &LimitRangeLister{indexer: s.indexer, cluster: cluster}
}

// LimitRangeLister implements the corev1listers.LimitRangeLister interface.
type LimitRangeLister struct {
	indexer cache.Indexer
	cluster logicalcluster.Name
}

// List lists all corev1.LimitRange in the indexer.
func (s LimitRangeLister) List(selector labels.Selector) (ret []*corev1.LimitRange, err error) {
	selectAll := selector == nil || selector.Empty()

	key := apimachinerycache.ToClusterAwareKey(s.cluster.String(), "", "")
	list, err := s.indexer.ByIndex(apimachinerycache.ClusterIndexName, key)
	if err != nil {
		return nil, err
	}

	for i := range list {
		obj := list[i].(*corev1.LimitRange)
		if selectAll {
			ret = append(ret, obj)
		} else {
			if selector.Matches(labels.Set(obj.GetLabels())) {
				ret = append(ret, obj)
			}
		}
	}

	return ret, err
}

// LimitRanges returns an object that can list and get corev1.LimitRange.
func (s LimitRangeLister) LimitRanges(namespace string) corev1listers.LimitRangeNamespaceLister {
	return &LimitRangeNamespaceLister{indexer: s.indexer, cluster: s.cluster, namespace: namespace}
}

// LimitRangeNamespaceLister implements the corev1listers.LimitRangeNamespaceLister interface.
type LimitRangeNamespaceLister struct {
	indexer   cache.Indexer
	cluster   logicalcluster.Name
	namespace string
}

// List lists all corev1.LimitRange in the indexer for a given namespace.
func (s LimitRangeNamespaceLister) List(selector labels.Selector) (ret []*corev1.LimitRange, err error) {
	selectAll := selector == nil || selector.Empty()

	key := apimachinerycache.ToClusterAwareKey(s.cluster.String(), s.namespace, "")
	list, err := s.indexer.ByIndex(apimachinerycache.ClusterAndNamespaceIndexName, key)
	if err != nil {
		return nil, err
	}

	for i := range list {
		obj := list[i].(*corev1.LimitRange)
		if selectAll {
			ret = append(ret, obj)
		} else {
			if selector.Matches(labels.Set(obj.GetLabels())) {
				ret = append(ret, obj)
			}
		}
	}
	return ret, err
}

// Get retrieves the corev1.LimitRange from the indexer for a given namespace and name.
func (s LimitRangeNamespaceLister) Get(name string) (*corev1.LimitRange, error) {
	key := apimachinerycache.ToClusterAwareKey(s.cluster.String(), s.namespace, name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(corev1.Resource("LimitRange"), name)
	}
	return obj.(*corev1.LimitRange), nil
}
