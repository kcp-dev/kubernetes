//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1beta1

import (
	apimachinerycache "github.com/kcp-dev/apimachinery/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v2"
	schedulingv1beta1 "k8s.io/api/scheduling/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	schedulingv1beta1listers "k8s.io/client-go/listers/scheduling/v1beta1"
	"k8s.io/client-go/tools/cache"
)

var _ schedulingv1beta1listers.PriorityClassLister = &PriorityClassClusterLister{}

// PriorityClassClusterLister implements the schedulingv1beta1listers.PriorityClassLister interface.
type PriorityClassClusterLister struct {
	indexer cache.Indexer
}

// NewPriorityClassClusterLister returns a new PriorityClassClusterLister.
func NewPriorityClassClusterLister(indexer cache.Indexer) schedulingv1beta1listers.PriorityClassLister {
	return &PriorityClassClusterLister{indexer: indexer}
}

// List lists all schedulingv1beta1.PriorityClass in the indexer.
func (s PriorityClassClusterLister) List(selector labels.Selector) (ret []*schedulingv1beta1.PriorityClass, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*schedulingv1beta1.PriorityClass))
	})
	return ret, err
}

// Get retrieves the schedulingv1beta1.PriorityClass from the indexer for a given name.
func (s PriorityClassClusterLister) Get(name string) (*schedulingv1beta1.PriorityClass, error) {
	panic("Calling 'Get' is not supported before scoping lister to a workspace")
}

// Cluster returns an object that can list and get schedulingv1beta1.PriorityClass.

func (s PriorityClassClusterLister) Cluster(cluster logicalcluster.Name) schedulingv1beta1listers.PriorityClassLister {
	return &PriorityClassLister{indexer: s.indexer, cluster: cluster}
}

// PriorityClassLister implements the schedulingv1beta1listers.PriorityClassLister interface.
type PriorityClassLister struct {
	indexer cache.Indexer
	cluster logicalcluster.Name
}

// List lists all schedulingv1beta1.PriorityClass in the indexer.
func (s PriorityClassLister) List(selector labels.Selector) (ret []*schedulingv1beta1.PriorityClass, err error) {
	selectAll := selector == nil || selector.Empty()

	key := apimachinerycache.ToClusterAwareKey(s.cluster.String(), "", "")
	list, err := s.indexer.ByIndex(apimachinerycache.ClusterIndexName, key)
	if err != nil {
		return nil, err
	}

	for i := range list {
		obj := list[i].(*schedulingv1beta1.PriorityClass)
		if selectAll {
			ret = append(ret, obj)
		} else {
			if selector.Matches(labels.Set(obj.GetLabels())) {
				ret = append(ret, obj)
			}
		}
	}

	return ret, err
}

// Get retrieves the schedulingv1beta1.PriorityClass from the indexer for a given name.
func (s PriorityClassLister) Get(name string) (*schedulingv1beta1.PriorityClass, error) {
	key := apimachinerycache.ToClusterAwareKey(s.cluster.String(), "", name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(schedulingv1beta1.Resource("PriorityClass"), name)
	}
	return obj.(*schedulingv1beta1.PriorityClass), nil
}
