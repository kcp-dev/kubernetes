//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1beta1

import (
	apimachinerycache "github.com/kcp-dev/apimachinery/pkg/cache"
	"github.com/kcp-dev/logicalcluster"
	extensionsv1beta1 "k8s.io/api/extensions/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	extensionsv1beta1listers "k8s.io/client-go/listers/extensions/v1beta1"
	"k8s.io/client-go/tools/cache"
)

var _ extensionsv1beta1listers.ReplicaSetLister = &ReplicaSetClusterLister{}

// ReplicaSetClusterLister implements the extensionsv1beta1listers.ReplicaSetLister interface.
type ReplicaSetClusterLister struct {
	indexer cache.Indexer
}

// NewReplicaSetClusterLister returns a new ReplicaSetClusterLister.
func NewReplicaSetClusterLister(indexer cache.Indexer) extensionsv1beta1listers.ReplicaSetLister {
	return &ReplicaSetClusterLister{indexer: indexer}
}

// List lists all extensionsv1beta1.ReplicaSet in the indexer.
func (s ReplicaSetClusterLister) List(selector labels.Selector) (ret []*extensionsv1beta1.ReplicaSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*extensionsv1beta1.ReplicaSet))
	})
	return ret, err
}

// ReplicaSets returns an object that can list and get extensionsv1beta1.ReplicaSet.
func (s ReplicaSetClusterLister) ReplicaSets(namespace string) extensionsv1beta1listers.ReplicaSetNamespaceLister {
	panic("Calling 'ReplicaSets' is not supported before scoping lister to a workspace")
}

// Cluster returns an object that can list and get extensionsv1beta1.ReplicaSet.

func (s ReplicaSetClusterLister) Cluster(cluster logicalcluster.Name) extensionsv1beta1listers.ReplicaSetLister {
	return &ReplicaSetLister{indexer: s.indexer, cluster: cluster}
}

// ReplicaSetLister implements the extensionsv1beta1listers.ReplicaSetLister interface.
type ReplicaSetLister struct {
	indexer cache.Indexer
	cluster logicalcluster.Name
}

// List lists all extensionsv1beta1.ReplicaSet in the indexer.
func (s ReplicaSetLister) List(selector labels.Selector) (ret []*extensionsv1beta1.ReplicaSet, err error) {
	selectAll := selector == nil || selector.Empty()

	key := apimachinerycache.ToClusterAwareKey(s.cluster.String(), "", "")
	list, err := s.indexer.ByIndex(apimachinerycache.ClusterIndexName, key)
	if err != nil {
		return nil, err
	}

	for i := range list {
		obj := list[i].(*extensionsv1beta1.ReplicaSet)
		if selectAll {
			ret = append(ret, obj)
		} else {
			if selector.Matches(labels.Set(obj.GetLabels())) {
				ret = append(ret, obj)
			}
		}
	}

	return ret, err
}

// ReplicaSets returns an object that can list and get extensionsv1beta1.ReplicaSet.
func (s ReplicaSetLister) ReplicaSets(namespace string) extensionsv1beta1listers.ReplicaSetNamespaceLister {
	return &ReplicaSetNamespaceLister{indexer: s.indexer, cluster: s.cluster, namespace: namespace}
}

// ReplicaSetNamespaceLister implements the extensionsv1beta1listers.ReplicaSetNamespaceLister interface.
type ReplicaSetNamespaceLister struct {
	indexer   cache.Indexer
	cluster   logicalcluster.Name
	namespace string
}

// List lists all extensionsv1beta1.ReplicaSet in the indexer for a given namespace.
func (s ReplicaSetNamespaceLister) List(selector labels.Selector) (ret []*extensionsv1beta1.ReplicaSet, err error) {
	selectAll := selector == nil || selector.Empty()

	key := apimachinerycache.ToClusterAwareKey(s.cluster.String(), s.namespace, "")
	list, err := s.indexer.ByIndex(apimachinerycache.ClusterAndNamespaceIndexName, key)
	if err != nil {
		return nil, err
	}

	for i := range list {
		obj := list[i].(*extensionsv1beta1.ReplicaSet)
		if selectAll {
			ret = append(ret, obj)
		} else {
			if selector.Matches(labels.Set(obj.GetLabels())) {
				ret = append(ret, obj)
			}
		}
	}
	return ret, err
}

// Get retrieves the extensionsv1beta1.ReplicaSet from the indexer for a given namespace and name.
func (s ReplicaSetNamespaceLister) Get(name string) (*extensionsv1beta1.ReplicaSet, error) {
	key := apimachinerycache.ToClusterAwareKey(s.cluster.String(), s.namespace, name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(extensionsv1beta1.Resource("ReplicaSet"), name)
	}
	return obj.(*extensionsv1beta1.ReplicaSet), nil
}
