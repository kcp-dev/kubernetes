//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1beta1

import (
	apimachinerycache "github.com/kcp-dev/apimachinery/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v2"
	extensionsv1beta1 "k8s.io/api/extensions/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	extensionsv1beta1listers "k8s.io/client-go/listers/extensions/v1beta1"
	"k8s.io/client-go/tools/cache"
)

var _ extensionsv1beta1listers.DaemonSetLister = &DaemonSetClusterLister{}

// DaemonSetClusterLister implements the extensionsv1beta1listers.DaemonSetLister interface.
type DaemonSetClusterLister struct {
	indexer cache.Indexer
}

// NewDaemonSetClusterLister returns a new DaemonSetClusterLister.
func NewDaemonSetClusterLister(indexer cache.Indexer) extensionsv1beta1listers.DaemonSetLister {
	return &DaemonSetClusterLister{indexer: indexer}
}

// List lists all extensionsv1beta1.DaemonSet in the indexer.
func (s DaemonSetClusterLister) List(selector labels.Selector) (ret []*extensionsv1beta1.DaemonSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*extensionsv1beta1.DaemonSet))
	})
	return ret, err
}

// DaemonSets returns an object that can list and get extensionsv1beta1.DaemonSet.
func (s DaemonSetClusterLister) DaemonSets(namespace string) extensionsv1beta1listers.DaemonSetNamespaceLister {
	panic("Calling 'DaemonSets' is not supported before scoping lister to a workspace")
}

// Cluster returns an object that can list and get extensionsv1beta1.DaemonSet.

func (s DaemonSetClusterLister) Cluster(cluster logicalcluster.Name) extensionsv1beta1listers.DaemonSetLister {
	return &DaemonSetLister{indexer: s.indexer, cluster: cluster}
}

// DaemonSetLister implements the extensionsv1beta1listers.DaemonSetLister interface.
type DaemonSetLister struct {
	indexer cache.Indexer
	cluster logicalcluster.Name
}

// List lists all extensionsv1beta1.DaemonSet in the indexer.
func (s DaemonSetLister) List(selector labels.Selector) (ret []*extensionsv1beta1.DaemonSet, err error) {
	selectAll := selector == nil || selector.Empty()

	key := apimachinerycache.ToClusterAwareKey(s.cluster.String(), "", "")
	list, err := s.indexer.ByIndex(apimachinerycache.ClusterIndexName, key)
	if err != nil {
		return nil, err
	}

	for i := range list {
		obj := list[i].(*extensionsv1beta1.DaemonSet)
		if selectAll {
			ret = append(ret, obj)
		} else {
			if selector.Matches(labels.Set(obj.GetLabels())) {
				ret = append(ret, obj)
			}
		}
	}

	return ret, err
}

// DaemonSets returns an object that can list and get extensionsv1beta1.DaemonSet.
func (s DaemonSetLister) DaemonSets(namespace string) extensionsv1beta1listers.DaemonSetNamespaceLister {
	return &DaemonSetNamespaceLister{indexer: s.indexer, cluster: s.cluster, namespace: namespace}
}

// DaemonSetNamespaceLister implements the extensionsv1beta1listers.DaemonSetNamespaceLister interface.
type DaemonSetNamespaceLister struct {
	indexer   cache.Indexer
	cluster   logicalcluster.Name
	namespace string
}

// List lists all extensionsv1beta1.DaemonSet in the indexer for a given namespace.
func (s DaemonSetNamespaceLister) List(selector labels.Selector) (ret []*extensionsv1beta1.DaemonSet, err error) {
	selectAll := selector == nil || selector.Empty()

	key := apimachinerycache.ToClusterAwareKey(s.cluster.String(), s.namespace, "")
	list, err := s.indexer.ByIndex(apimachinerycache.ClusterAndNamespaceIndexName, key)
	if err != nil {
		return nil, err
	}

	for i := range list {
		obj := list[i].(*extensionsv1beta1.DaemonSet)
		if selectAll {
			ret = append(ret, obj)
		} else {
			if selector.Matches(labels.Set(obj.GetLabels())) {
				ret = append(ret, obj)
			}
		}
	}
	return ret, err
}

// Get retrieves the extensionsv1beta1.DaemonSet from the indexer for a given namespace and name.
func (s DaemonSetNamespaceLister) Get(name string) (*extensionsv1beta1.DaemonSet, error) {
	key := apimachinerycache.ToClusterAwareKey(s.cluster.String(), s.namespace, name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(extensionsv1beta1.Resource("DaemonSet"), name)
	}
	return obj.(*extensionsv1beta1.DaemonSet), nil
}
