//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1beta1

import (
	apimachinerycache "github.com/kcp-dev/apimachinery/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v2"
	certificatesv1beta1 "k8s.io/api/certificates/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	certificatesv1beta1listers "k8s.io/client-go/listers/certificates/v1beta1"
	"k8s.io/client-go/tools/cache"
)

var _ certificatesv1beta1listers.CertificateSigningRequestLister = &CertificateSigningRequestClusterLister{}

// CertificateSigningRequestClusterLister implements the certificatesv1beta1listers.CertificateSigningRequestLister interface.
type CertificateSigningRequestClusterLister struct {
	indexer cache.Indexer
}

// NewCertificateSigningRequestClusterLister returns a new CertificateSigningRequestClusterLister.
func NewCertificateSigningRequestClusterLister(indexer cache.Indexer) certificatesv1beta1listers.CertificateSigningRequestLister {
	return &CertificateSigningRequestClusterLister{indexer: indexer}
}

// List lists all certificatesv1beta1.CertificateSigningRequest in the indexer.
func (s CertificateSigningRequestClusterLister) List(selector labels.Selector) (ret []*certificatesv1beta1.CertificateSigningRequest, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*certificatesv1beta1.CertificateSigningRequest))
	})
	return ret, err
}

// Get retrieves the certificatesv1beta1.CertificateSigningRequest from the indexer for a given name.
func (s CertificateSigningRequestClusterLister) Get(name string) (*certificatesv1beta1.CertificateSigningRequest, error) {
	panic("Calling 'Get' is not supported before scoping lister to a workspace")
}

// Cluster returns an object that can list and get certificatesv1beta1.CertificateSigningRequest.

func (s CertificateSigningRequestClusterLister) Cluster(cluster logicalcluster.Name) certificatesv1beta1listers.CertificateSigningRequestLister {
	return &CertificateSigningRequestLister{indexer: s.indexer, cluster: cluster}
}

// CertificateSigningRequestLister implements the certificatesv1beta1listers.CertificateSigningRequestLister interface.
type CertificateSigningRequestLister struct {
	indexer cache.Indexer
	cluster logicalcluster.Name
}

// List lists all certificatesv1beta1.CertificateSigningRequest in the indexer.
func (s CertificateSigningRequestLister) List(selector labels.Selector) (ret []*certificatesv1beta1.CertificateSigningRequest, err error) {
	selectAll := selector == nil || selector.Empty()

	key := apimachinerycache.ToClusterAwareKey(s.cluster.String(), "", "")
	list, err := s.indexer.ByIndex(apimachinerycache.ClusterIndexName, key)
	if err != nil {
		return nil, err
	}

	for i := range list {
		obj := list[i].(*certificatesv1beta1.CertificateSigningRequest)
		if selectAll {
			ret = append(ret, obj)
		} else {
			if selector.Matches(labels.Set(obj.GetLabels())) {
				ret = append(ret, obj)
			}
		}
	}

	return ret, err
}

// Get retrieves the certificatesv1beta1.CertificateSigningRequest from the indexer for a given name.
func (s CertificateSigningRequestLister) Get(name string) (*certificatesv1beta1.CertificateSigningRequest, error) {
	key := apimachinerycache.ToClusterAwareKey(s.cluster.String(), "", name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(certificatesv1beta1.Resource("CertificateSigningRequest"), name)
	}
	return obj.(*certificatesv1beta1.CertificateSigningRequest), nil
}
